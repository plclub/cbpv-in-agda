import Relation.Binary.PropositionalEquality as Eq
open import Axiom.Extensionality.Propositional using (Extensionality)
import Relation.Binary.PropositionalEquality as Eq
open import Data.Fin using (Fin; suc; zero)
open import Data.Nat using (‚Ñï)
open import Level using (0‚Ñì)
open Eq using (_‚â°_; refl)

import CBPV.Base.SyntacticTyping as CBPV
open import CBN.Base.SyntacticTyping
open import CBN.Base.Terms
open import CBN.Base.Translation
open import CBN.Base.Types
open import CBPV.Base.Renaming
open import CBPV.Base.Terms
open import CBPV.Base.Types
open CBPV hiding (_‚à∑_; Œì)

module CBN.Base.TypePreservation where

postulate
  extensionality : Extensionality 0‚Ñì 0‚Ñì

‚ü¶Œì‚à∑œÑ‚üß-expand : ‚ü¶ Œì ‚à∑ œÑ ‚üß ‚â° ‚ü¶ Œì ‚üß CBPV.‚à∑ ùëº ‚ü¶ œÑ ‚üß
‚ü¶Œì‚à∑œÑ‚üß-expand = extensionality Œª where
                                  zero    ‚Üí refl
                                  (suc m) ‚Üí refl

‚Ü¶-preserves : e ‚Ü¶ M
            ‚Üí Œì ‚ä¢ e ‚¶Ç œÑ
              ------------------
            ‚Üí ‚ü¶ Œì ‚üß ‚ä¢c M ‚¶Ç ‚ü¶ œÑ ‚üß
‚Ü¶-preserves transVar typeVar = typeForce typeVar
‚Ü¶-preserves transUnit typeUnit = typeRet typeUnit
‚Ü¶-preserves {Œì = Œì} (transAbs e‚Ü¶M) (typeAbs {œÑ = œÑ} ‚ä¢e)
  with ‚Ü¶-preserves e‚Ü¶M ‚ä¢e
...  | ih
  rewrite (‚ü¶Œì‚à∑œÑ‚üß-expand {Œì = Œì} {œÑ}) = typeAbs ih
‚Ü¶-preserves (transApp e‚ÇÅ‚Ü¶M e‚ÇÇ‚Ü¶N) (typeApp ‚ä¢e‚ÇÅ ‚ä¢e‚ÇÇ) =
  typeApp
    (‚Ü¶-preserves e‚ÇÅ‚Ü¶M ‚ä¢e‚ÇÅ)
    (typeThunk (‚Ü¶-preserves e‚ÇÇ‚Ü¶N ‚ä¢e‚ÇÇ))
‚Ü¶-preserves (transSeq e‚ÇÅ‚Ü¶M e‚ÇÇ‚Ü¶N) (typeSeq ‚ä¢e‚ÇÅ ‚ä¢e‚ÇÇ) =
  typeLetin
    (‚Ü¶-preserves e‚ÇÅ‚Ü¶M ‚ä¢e‚ÇÅ)
    (typeSequence
      typeVar
      (comp-typepres-renaming (‚Ü¶-preserves e‚ÇÇ‚Ü¶N ‚ä¢e‚ÇÇ) Œª{_ ‚Üí refl}))
‚Ü¶-preserves (transInl e‚Ü¶M) (typeInl ‚ä¢e) =
  typeRet (typeInl (typeThunk (‚Ü¶-preserves e‚Ü¶M ‚ä¢e)))
‚Ü¶-preserves (transInr e‚Ü¶M) (typeInr ‚ä¢e) =
  typeRet (typeInr (typeThunk (‚Ü¶-preserves e‚Ü¶M ‚ä¢e)))
‚Ü¶-preserves (transPair e‚ÇÅ‚Ü¶M‚ÇÅ e‚ÇÇ‚Ü¶M‚ÇÇ) (typePair ‚ä¢M‚ÇÅ ‚ä¢M‚ÇÇ) =
  typeCpair
    (‚Ü¶-preserves e‚ÇÅ‚Ü¶M‚ÇÅ ‚ä¢M‚ÇÅ)
    (‚Ü¶-preserves e‚ÇÇ‚Ü¶M‚ÇÇ ‚ä¢M‚ÇÇ)
‚Ü¶-preserves (transFst e‚Ü¶M) (typeFst ‚ä¢M) =
  typeProjl (‚Ü¶-preserves e‚Ü¶M ‚ä¢M)
‚Ü¶-preserves (transSnd e‚Ü¶M) (typeSnd ‚ä¢M) =
  typeProjr (‚Ü¶-preserves e‚Ü¶M ‚ä¢M)
‚Ü¶-preserves (transCase e‚Ü¶M e‚ÇÅ‚Ü¶M‚ÇÅ e‚ÇÇ‚Ü¶M‚ÇÇ) (typeCase ‚ä¢e ‚ä¢e‚ÇÅ ‚ä¢e‚ÇÇ) =
  typeLetin
    (‚Ü¶-preserves e‚Ü¶M ‚ä¢e)
    (typeCase
      typeVar
      (comp-typepres-renaming (‚Ü¶-preserves e‚ÇÅ‚Ü¶M‚ÇÅ ‚ä¢e‚ÇÅ)
      Œª where zero ‚Üí refl ; (suc _) ‚Üí refl)
      (comp-typepres-renaming (‚Ü¶-preserves e‚ÇÇ‚Ü¶M‚ÇÇ ‚ä¢e‚ÇÇ)
      Œª where zero ‚Üí refl ; (suc _) ‚Üí refl))

translation-preservation : Œì ‚ä¢ e ‚¶Ç œÑ
                           ----------------------
                         ‚Üí ‚ü¶ Œì ‚üß ‚ä¢c ‚ü¶ e ‚üß ‚¶Ç ‚ü¶ œÑ ‚üß
translation-preservation = ‚Ü¶-preserves e‚Ü¶‚ü¶e‚üß
